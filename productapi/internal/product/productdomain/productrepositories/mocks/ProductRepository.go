// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	productentities "github.com/odanaraujo/stocks-api/internal/product/productdomain/productentities"
	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0, product
func (_m *ProductRepository) Create(_a0 context.Context, product *productentities.Product) error {
	ret := _m.Called(_a0, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *productentities.Product) error); ok {
		r0 = rf(_a0, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: _a0, id
func (_m *ProductRepository) Delete(_a0 context.Context, id string) error {
	ret := _m.Called(_a0, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: _a0, id
func (_m *ProductRepository) GetByID(_a0 context.Context, id string) (*productentities.Product, error) {
	ret := _m.Called(_a0, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *productentities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*productentities.Product, error)); ok {
		return rf(_a0, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *productentities.Product); ok {
		r0 = rf(_a0, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*productentities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: _a0, productType
func (_m *ProductRepository) Search(_a0 context.Context, productType string) ([]*productentities.Product, error) {
	ret := _m.Called(_a0, productType)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []*productentities.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*productentities.Product, error)); ok {
		return rf(_a0, productType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*productentities.Product); ok {
		r0 = rf(_a0, productType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*productentities.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, productType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0, productToUpdate
func (_m *ProductRepository) Update(_a0 context.Context, productToUpdate *productentities.Product) error {
	ret := _m.Called(_a0, productToUpdate)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *productentities.Product) error); ok {
		r0 = rf(_a0, productToUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
